
Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001c4  2**0
                  ALLOC
  2 .stab         000003b4  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006ad  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 91 00 	call	0x122	; 0x122 <main>
  74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_3>:
unsigned char cnt = 0;



ISR(INT2_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	cnt++;
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 60 00 	sts	0x0060, r24
	if(cnt == 10)cnt = 0;
  a4:	80 91 60 00 	lds	r24, 0x0060
  a8:	8a 30       	cpi	r24, 0x0A	; 10
  aa:	11 f4       	brne	.+4      	; 0xb0 <__vector_3+0x34>
  ac:	10 92 60 00 	sts	0x0060, r1
	PORTC &= 0xF0;
  b0:	a5 e3       	ldi	r26, 0x35	; 53
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e5 e3       	ldi	r30, 0x35	; 53
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 7f       	andi	r24, 0xF0	; 240
  bc:	8c 93       	st	X, r24
	PORTC |= cnt;
  be:	a5 e3       	ldi	r26, 0x35	; 53
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	e5 e3       	ldi	r30, 0x35	; 53
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	80 91 60 00 	lds	r24, 0x0060
  cc:	89 2b       	or	r24, r25
  ce:	8c 93       	st	X, r24
}
  d0:	cf 91       	pop	r28
  d2:	df 91       	pop	r29
  d4:	ff 91       	pop	r31
  d6:	ef 91       	pop	r30
  d8:	bf 91       	pop	r27
  da:	af 91       	pop	r26
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <INT2_Init>:


void INT2_Init (void)
{
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
	MCUCSR |= (1<<6);
  f2:	a4 e5       	ldi	r26, 0x54	; 84
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e4 e5       	ldi	r30, 0x54	; 84
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	8c 93       	st	X, r24
	GICR |= (1<<5);
 100:	ab e5       	ldi	r26, 0x5B	; 91
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	eb e5       	ldi	r30, 0x5B	; 91
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	8c 93       	st	X, r24
	SREG |= (1<<7);
 10e:	af e5       	ldi	r26, 0x5F	; 95
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	ef e5       	ldi	r30, 0x5F	; 95
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8c 93       	st	X, r24
}
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <main>:


int main (void)
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
	DDRC |= 0x0F;
 12a:	a4 e3       	ldi	r26, 0x34	; 52
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e4 e3       	ldi	r30, 0x34	; 52
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8f 60       	ori	r24, 0x0F	; 15
 136:	8c 93       	st	X, r24
	PORTC &= 0xF0;
 138:	a5 e3       	ldi	r26, 0x35	; 53
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e5 e3       	ldi	r30, 0x35	; 53
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 7f       	andi	r24, 0xF0	; 240
 144:	8c 93       	st	X, r24

	INT2_Init();
 146:	0e 94 75 00 	call	0xea	; 0xea <INT2_Init>
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x28>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
